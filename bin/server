#!/usr/bin/env node

'use strict';

/* eslint-disable global-require */
/* eslint-disable prefer-rest-params */

process.env.IS_REPL = process.argv.indexOf('--repl') > -1;
process.env.NODE_ENV = process.env.NODE_ENV || 'dev';

/* istanbul ignore else */
if (process.argv.indexOf('--debug') > -1) {
  require('debug').enable('homegrown,homegrown:*');
}

/* istanbul ignore else */
if (process.env.NODE_ENV === 'dev') {
  require('source-map-support').install();
}

// common helpers
const die = statusCode => process.exit(statusCode);

// standard output
function echo() {
  process.stdout.write(`${Array.prototype.slice.call(arguments).join('')}`);
}

// runtime hooks
const Module = require('module');

function _clearModules() {
  Object.keys(Module._cache)
    .forEach((key) => {
      /* istanbul ignore else */
      if (key.indexOf('node_modules') === -1) {
        delete Module._cache[key];
      }
    });
}

// initialization
let $;

const cwd = process.cwd();
const path = require('path');

const homegrown = require('..');

// setup environment
homegrown.env(cwd);

function parseBool(value) {
  if (value === 'true') {
    return true;
  }

  if (value === 'false') {
    return false;
  }

  return undefined;
}

function _startApplication(done) {
  try {
    // reset context
    const Homegrown = homegrown();

    $ = Homegrown.new({
      env: process.env.NODE_ENV || 'dev',
      appDir: path.resolve(cwd, process.env.APP_DIR || 'app'),
      publicDir: path.resolve(cwd, process.env.PUBLIC_DIR || 'public'),
      session: {
        secret: process.env.SESSION_SECRET || 'secret*value',
        keys: (process.env.SESSION_KEYS || 'secret*value').split(/\s+/),
        maxAge: parseInt(process.env.SESSION_MAXAGE || 0, 10) || 86400000,
      },
      upload: {
        multiple: parseBool(process.env.UPLOAD_MULTIPLE) || true,
        maxFiles: parseInt(process.env.UPLOAD_MAXFILES, 0) || 10,
      },
    });

    // import native support
    $.extensions('Homegrown.support.http', () => require('http'));

    // try static handler first
    $.mount(require('serve-static')($.get('publicDir')));

    // inject logging helpers
    $.use(Homegrown.plugs.logger({ transports: [{ Console: { colorize: true } }] }));

    // standard mvc kit
    $.use(Homegrown.plugs.models($.get('appDir'), path.join(__dirname, '../lib/preset')));
    $.use(Homegrown.plugs.render($.get('appDir'), path.join(__dirname, '../lib/preset')));
    $.use(Homegrown.plugs.router($.get('appDir'), path.join(__dirname, '../lib/preset')));

    // other goodies
    $.use(Homegrown.plugs.upload($.get('upload')));
    $.use(Homegrown.plugs.session($.get('session')));

    /* istanbul ignore else */
    if (process.env.IS_REPL === 'true') {
      $.use(Homegrown.plugs.repl());
    }

    // start server
    $.listen(process.env.PORT || 8080, (app) => {
      echo('Listening on ', app.location.href, '\n');

      /* istanbul ignore else */
      if (typeof done === 'function') {
        done($, app);
      }
    });
  } catch (e) {
    echo(`${e.message || e.toString()}\n`);
    die(1);
  }
}

_startApplication();

function _reload(cb) {
  return homegrown.burn(() => {
    _clearModules();
    _startApplication(cb);
  });
}

if (process.env.IS_REPL === 'true') {
  process.on('repl:reload', () => _reload());
} else {
  process.on('exit', () => homegrown.burn());
  process.on('SIGINT', () => process.exit());
}

module.exports = cb => _reload(cb);
