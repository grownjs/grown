#!/bin/sh
':' // ; exec "$(command -v nodejs || command -v node)" "$0" "$@"
;

'use strict';

/* eslint-disable global-require */

const $ = require('wargs')(process.argv.slice(2), {
  aliases: {
    D: 'database',
    v: 'version',
    d: 'debug',
    f: 'force',
    q: 'quiet',
    h: 'help',
    l: 'list',
    p: 'cwd',
  },
});

/* istanbul ignore else */
if (process.env.CI) {
  process.env.NODE_ENV = 'ci';
}

/* istanbul ignore else */
if ($.params.port > 0) {
  process.env.PORT = $.params.port;
}

const thisPkg = require('../package.json');
const cleanStack = require('clean-stack');
const chalk = require('chalk');
const path = require('path');

let _task = $._.shift();

const _ = require('./lib/util');

const _bin = path.basename(thisPkg.bin);

function showHelp() {
  _.echo(`  Usage:
    ${_bin} new APP_PATH [...]

  Options:
    -D, --database     # Preconfigure for selected database (options: mysql/mssql/pgsql/sqlite3)
                       # default: sqlite3
  Runtime options:
    -f, --force        # Overwrite files that already exist
    -q, --quiet        # Suppress status output

  Other actions:
    ${_bin} g|add|generate [...]
    ${_bin} s|up|start [...]
    ${_bin} repl

  Grown options:
    -h, --help         # Show this help message and quit
    -v, --version      # Show Grown version number and quit\n`);
}

if ($.flags.version) {
  _.echo(chalk.green(`${thisPkg.name} v${thisPkg.version}`), '\n');
  _.die();
}

if (!_task || $.flags.help) {
  showHelp();
  _.die();
}

// FIXME; this should be built-in grown
const aliases = {
  generate: ['g', 'add'],
  start: ['s', 'up'],
};

Object.keys(aliases).forEach((key) => {
  if (aliases[key].indexOf(_task) > -1) {
    _task = key;
  }
});

try {
  _.echo(chalk.gray(`Grown v${thisPkg.version} (${_task})`), '\n');

  switch (_task) {
    case 'generate':
    case 'start':
    case 'repl':
    case 'new':
      require(`./tasks/${_task}`)($);
      break;

    default:
      throw new Error(`Not implemented: ${_task}`);
  }
} catch (e) {
  _.echo(chalk.red(($.flags.debug && cleanStack(e.stack)) || e.message), '\n');
  _.die(1);
}

process.on('SIGINT', () => process.exit());
