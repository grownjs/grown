#!/bin/sh

':' // ; exec "$(command -v nodejs || command -v node)" "$0" "$@"
;

'use strict';

/* eslint-disable global-require */
/* eslint-disable no-nested-ternary */

const GROWN_TXT = `
  \u001b[32m▄████  ██▀███   ▒█████   █     █░███▄    █\u001b[39m
 \u001b[32m██▒ ▀█▒▓██ ▒ ██▒▒██▒  ██▒▓█░ █ ░█░██ ▀█   █\u001b[39m
\u001b[32m▒██░▄▄▄░▓██ ░▄█ ▒▒██░  ██▒▒█░ █ ░█▓██  ▀█ ██▒\u001b[39m
\u001b[32m░▓█  ██▓▒██▀▀█▄  ▒██   ██░░█░ █ ░█▓██▒  ▐▌██▒\u001b[39m
\u001b[32m░▒▓███▀▒░██▓ ▒██▒░ ████▓▒░░░██▒██▓▒██░   ▓██░\u001b[39m
 \u001b[32m░▒   ▒ ░ ▒▓ ░▒▓░░ ▒░▒░▒░ ░ ▓░▒ ▒ ░ ▒░   ▒ ▒\u001b[39m
  \u001b[32m░   ░   ░▒ ░ ▒░  ░ ▒ ▒░   ▒ ░ ░ ░ ░░   ░ ▒░\u001b[39m
  \u001b[32m░   ░   ░░   ░ ░ ░ ░ ▒    ░   ░    ░   ░ ░\u001b[39m
      \u001b[32m░    ░         ░ ░      ░            ░\u001b[39m
`;

const _ = require('./lib/util');

let $;

try {
  $ = require('wargs')(process.argv.slice(2), {
    booleans: 'ODIGRCAusVvdfqhly',
    camelCase: true,
    defaults: {
      cwd: process.cwd(),
      port: process.env.PORT || 8080,
      host: process.env.HOST || '0.0.0.0',
    },
    aliases: {
      y: 'interactive',
      O: 'no-install-opts',
      D: 'no-install-dev',
      I: 'no-install',
      G: 'no-clone',
      R: 'no-exec',
      C: 'no-copy',
      A: 'no-add',
      i: 'repl',
      u: 'uws',
      s: 'https',
      v: 'version',
      V: 'verbose',
      d: 'debug',
      f: 'force',
      q: 'quiet',
      x: 'exec',
      P: 'port',
      H: 'host',
      h: 'help',
      l: 'list',
      c: 'cwd',
      e: 'env',
    },
  });
} catch (e) {
  _.printError(e);
  _.die(1);
}

// defaults
process.name = 'grown';

process.env.NODE_ENV = $.flags.env || 'development';

/* istanbul ignore else */
if (process.env.CI) {
  process.env.NODE_ENV = 'ci';
}

delete $.flags.env;

const thisPkg = require('../package.json');
const exec = require('child_process').exec;
const path = require('path');
const fs = require('fs');

let _task = $._.shift();

const _bin = path.basename(thisPkg.bin);

const aliases = {
  generate: ['g', 'add'],
  start: ['s', 'up'],
  repl: ['c'],
};

Object.keys(aliases).forEach(key => {
  /* istanbul ignore else */
  if (aliases[key].indexOf(_task) > -1) {
    _task = key;
  }
});

/* istanbul ignore else */
if (!_task && $.flags.list) {
  _task = 'generate';
}

// nice logs!
const _level = $.flags.verbose ? 'verbose' : $.flags.debug ? 'debug' : 'info';

const logger = require('log-pose')
  .setLevel(($.flags.quiet && !$.flags.version && !$.flags.help) ? false : _level)
  .getLogger(12, process.stdout, process.stderr);

if ($.flags.debug && $.flags.verbose) {
  require('debug').enable('grown,grown:*');
  require('log-pose').setLevel(false);
}

const cwd = $.flags.cwd || process.cwd();

delete $.flags.cwd;

function showHelp() {
  logger.write(`${GROWN_TXT}
  Usage:
    ${_bin} new APP_PATH [...]

  Presets:
    ES6=buble|babel|traceur
    IMAGES= ?
    SPRITES= ?
    STYLES=less|sass|styl|postcss
    BUNDLER=fusebox|webpack|rollup
    RELOADER=browser-sync|live-reload
    DATABASE=postgres|mysql|mssql|sqlite

  Initialization options:
    -O, [--no-install-opts]   # Skip installing dependencies
    -D, [--no-install-dev]    # Skip installing dependencies
    -I, [--no-install]        # Skip installing dependencies
    -G, [--no-clone]          # Skip cloning repositories
    -R, [--no-exec]           # Skip running commands
    -C, [--no-copy]           # Skip copying sources
    -A, [--no-add]            # Skip writing files
    -f, [--force]             # Force without asking
    -V, [--verbose]           # Installation logs
    -y, [--interactive]       # Interactive mode

  Runtime options:
    -d, [--debug]             # Enable all debug messages
    -q, [--quiet]             # Suppress status output
    -c, [--cwd]               # Set the process.cwd()
    -P, [--port]              # Set PORT value (default: 80)
    -H, [--host]              # Set HOST value (default: 0.0.0.0)
    -e, [--env]               # Set NODE_ENV value (default: development)

  Server options:
    -i, [--repl]              # Enable the REPL
    -u, [--uws]               # Force UWS
    -s, [--https]             # Force HTTP

  Other actions:
    ${_bin} g|add|generate [...]
    ${_bin} s|up|start [...]
    ${_bin} c|repl

  Grown options:
    -l, [--list]         # List available generators
    -h, [--help]         # Show this help message and quit
    -x, [--exec]         # Execute a command before running
    -v, [--version]      # Show Grown version number and quit

`);
}

function start(cb) {
  process.on('exit', statusCode => {
    if (!statusCode) {
      logger.printf('\r\r{% end Done %}\n');
    }
  });

  if ($.flags.exec) {
    const child = exec($.flags.exec);

    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);

    child.on(process.version.split('.')[1] === '6' ? 'exit' : 'close', exitCode => {
      if (exitCode !== 0) {
        _.die(1);
      } else {
        cb();
      }
    });
  } else {
    cb();
  }
}

function run() {
  try {
    logger.info('\r{% green Grown v%s %} {% gray (node %s - %s) %}\r\n',
      thisPkg.version, process.version, process.env.NODE_ENV);

    const _tasks = {
      generate: require('./tasks/generate'),
      start: require('./tasks/start'),
      repl: require('./tasks/repl'),
      new: require('./tasks/new'),
    };

    switch (_task) {
      case 'generate':
      case 'start':
      case 'repl':
      case 'new':
        _tasks[_task]($, cwd, logger);
        break;

      default: {
        const _file = path.join(cwd, `lib/tasks/${_task}`);

        let _call;

        try {
          // try user first, then built-in
          _call = require(!fs.existsSync(_file)
            ? `./tasks/scripts/${_task}`
            : _file);
        } catch (e) {
          throw new Error(`Task 'lib/tasks/${_task}' not implemented`);
        }

        /* istanbul ignore else */
        if (typeof _call !== 'function') {
          throw new Error(`Task must be a function, given: ${_call}`);
        }

        const _farm = require(path.join(cwd, 'app/server'));

        _farm()
          .run(ctx => _call(ctx, $, logger))
          .then(() => _farm.teardown())
          .catch(e => {
            _.printError(e, $.flags, logger);
            _.die(1);
          });
      }
    }
  } catch (e) {
    _.printError(e, $.flags, logger);
    _.die(1);
  }
}

/* istanbul ignore else */
if ($.flags.version) {
  logger.printf('\r{% green %s v%s %} {% gray (node %s) %}\r\n',
    thisPkg.name, thisPkg.version,
    process.version);
  _.die();
}

/* istanbul ignore else */
if ((!_task || $.flags.help) && !$.params.exec) {
  showHelp();
  _.die();
} else {
  start(_task ? run : _.die);
}
