
[].slice.call(document.querySelectorAll('pre code.lang-js')).forEach(function (source) {
  var matches = source.innerText.match(/\/\*+\s*@runkit\s*(.+?)\s*\*+\//);
  if (!matches) { return; }
  var snippet = __runkit__[matches[1]] || __runkit__;
  var isEndpoint = snippet.endpoint;
  var sourceCode = source.innerText.replace(((matches[0]) + "\n"), '');
  var a = document.createElement('a');
  a.innerText = 'â–¾ REPL';
  a.href = '#';
  a.onclick = function (e) {
    delete a.onclick;
    e.preventDefault();
    a.innerText = 'Loading...';
    var target = document.createElement('div');
    RunKit.createNotebook({
      element: target,
      source: sourceCode,
      mode: isEndpoint && 'endpoint',
      title: snippet.title,
      preamble: snippet.preamble,
      onLoad: function onLoad(e) {
        target.style = 'display:block;overflow:hidden';
        source.parentNode.parentNode.removeChild(source.parentNode);
      },
    });
    target.style = 'display:none';
    source.parentNode.parentNode.insertBefore(target, source.parentNode);
  };
  source.parentNode.appendChild(a);
});

var activeLocation = location.pathname.replace(/\/$/, '') || '/';
var linkSelector = "#sidebar a[href$=\"" + activeLocation + "\"]";
var activeLink = document.querySelector(linkSelector);

if (activeLink && activeLocation !== '/') {
  activeLink.scrollIntoView({
    block: 'end',
  });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbHZhcml1cy9SZXBvc2l0b3JpZXMvZ3Jvd24vd2Vic2l0ZS9zcmMvc2NyaXB0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgUnVuS2l0LCBfX3J1bmtpdF9fICovXG5bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZSBjb2RlLmxhbmctanMnKSkuZm9yRWFjaChzb3VyY2UgPT4ge1xuICBjb25zdCBtYXRjaGVzID0gc291cmNlLmlubmVyVGV4dC5tYXRjaCgvXFwvXFwqK1xccypAcnVua2l0XFxzKiguKz8pXFxzKlxcKitcXC8vKTtcbiAgaWYgKCFtYXRjaGVzKSByZXR1cm47XG4gIGNvbnN0IHNuaXBwZXQgPSBfX3J1bmtpdF9fW21hdGNoZXNbMV1dIHx8IF9fcnVua2l0X187XG4gIGNvbnN0IGlzRW5kcG9pbnQgPSBzbmlwcGV0LmVuZHBvaW50O1xuICBjb25zdCBzb3VyY2VDb2RlID0gc291cmNlLmlubmVyVGV4dC5yZXBsYWNlKGAke21hdGNoZXNbMF19XFxuYCwgJycpO1xuICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBhLmlubmVyVGV4dCA9ICfilr4gUkVQTCc7XG4gIGEuaHJlZiA9ICcjJztcbiAgYS5vbmNsaWNrID0gZSA9PiB7XG4gICAgZGVsZXRlIGEub25jbGljaztcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgYS5pbm5lclRleHQgPSAnTG9hZGluZy4uLic7XG4gICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgUnVuS2l0LmNyZWF0ZU5vdGVib29rKHtcbiAgICAgIGVsZW1lbnQ6IHRhcmdldCxcbiAgICAgIHNvdXJjZTogc291cmNlQ29kZSxcbiAgICAgIG1vZGU6IGlzRW5kcG9pbnQgJiYgJ2VuZHBvaW50JyxcbiAgICAgIHRpdGxlOiBzbmlwcGV0LnRpdGxlLFxuICAgICAgcHJlYW1ibGU6IHNuaXBwZXQucHJlYW1ibGUsXG4gICAgICBvbkxvYWQoZSkge1xuICAgICAgICB0YXJnZXQuc3R5bGUgPSAnZGlzcGxheTpibG9jaztvdmVyZmxvdzpoaWRkZW4nO1xuICAgICAgICBzb3VyY2UucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNvdXJjZS5wYXJlbnROb2RlKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGFyZ2V0LnN0eWxlID0gJ2Rpc3BsYXk6bm9uZSc7XG4gICAgc291cmNlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFyZ2V0LCBzb3VyY2UucGFyZW50Tm9kZSk7XG4gIH07XG4gIHNvdXJjZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGEpO1xufSk7XG5cbmNvbnN0IGFjdGl2ZUxvY2F0aW9uID0gbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvJC8sICcnKSB8fCAnLyc7XG5jb25zdCBsaW5rU2VsZWN0b3IgPSBgI3NpZGViYXIgYVtocmVmJD1cIiR7YWN0aXZlTG9jYXRpb259XCJdYDtcbmNvbnN0IGFjdGl2ZUxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGxpbmtTZWxlY3Rvcik7XG5cbmlmIChhY3RpdmVMaW5rICYmIGFjdGl2ZUxvY2F0aW9uICE9PSAnLycpIHtcbiAgYWN0aXZlTGluay5zY3JvbGxJbnRvVmlldyh7XG4gICAgYmxvY2s6ICdlbmQnLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJjb25zdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLE9BQU8sV0FBQyxPQUFNLENBQUMsQUFBRztFQUM3RUEsR0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0VBQzFFLElBQUksQ0FBQyxPQUFPLElBQUUsU0FBTztFQUNyQkEsR0FBSyxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDO0VBQ3JEQSxHQUFLLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7RUFDcENBLEdBQUssQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRyxPQUFPLENBQUMsQ0FBQyxFQUFDLFFBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztFQUNuRUEsR0FBSyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3RDLENBQUMsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0VBQ3ZCLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0VBQ2IsQ0FBQyxDQUFDLE9BQU8sYUFBRyxFQUFDLENBQUMsQUFBRztJQUNmLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7SUFDM0JBLEdBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxNQUFNLENBQUMsY0FBYyxDQUFDO01BQ3BCLE9BQU8sRUFBRSxNQUFNO01BQ2YsTUFBTSxFQUFFLFVBQVU7TUFDbEIsSUFBSSxFQUFFLFVBQVUsSUFBSSxVQUFVO01BQzlCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztNQUNwQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7TUFDMUIsdUJBQU0sQ0FBQyxDQUFDLEVBQUU7UUFDUixNQUFNLENBQUMsS0FBSyxHQUFHLCtCQUErQixDQUFDO1FBQy9DLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7T0FDN0Q7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQztJQUM5QixNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUN0RSxDQUFDO0VBQ0YsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDbEMsQ0FBQyxDQUFDOztBQUVIQSxHQUFLLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUM7QUFDbkVBLEdBQUssQ0FBQyxZQUFZLEdBQUcsd0JBQXFCLGNBQWMsUUFBSSxDQUFDO0FBQzdEQSxHQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRXhELElBQUksVUFBVSxJQUFJLGNBQWMsS0FBSyxHQUFHLEVBQUU7RUFDeEMsVUFBVSxDQUFDLGNBQWMsQ0FBQztJQUN4QixLQUFLLEVBQUUsS0FBSztHQUNiLENBQUMsQ0FBQztDQUNKOyJ9